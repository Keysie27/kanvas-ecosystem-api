type Role {
    id: Int!
    name: String!
    title: String
    scope: String
}

extend type Query @guard {
    roles: [Role]
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Queries\\Roles\\RoleQuery@getAllRoles"
        )
    hasRole(userId: Int!, role: Mixed!): Boolean
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Queries\\Roles\\RoleQuery@hasRole"
        )
    can(userId: Int!, permission: String): Boolean
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Queries\\Roles\\RolePermissionQuery@can"
        )
    getAllAbilities(userId: Int!): [String]
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Queries\\Roles\\RoleAbilitiesQuery@getAllAbilities"
        )
}

extend type Mutation @guardByAdmin {
    createRole(name: String!, title: String): Role
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Roles\\RolesManagementMutation@createRole"
        )
    updateRole(id: Int!, name: String, title: String): Role
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Roles\\RolesManagementMutation@updateRole"
        )

    #assign role to the company and to the app
    assignRoleToUser(userId: Int!, role: Mixed!): Boolean
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Roles\\RolesManagementMutation@assignRoleToUser"
        )
    removeRole(userId: Int!, role: Mixed!): Boolean
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Roles\\RolesManagementMutation@removeRoleFromUser"
        )
    givePermissionToUser(userId: Int!, permission: String!): Boolean
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Roles\\RolesManagementMutation@givePermissionToUser"
        )
    removePermissionToUser(userId: Int!, permission: String!): Boolean
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Roles\\RolesManagementMutation@removePermissionToUser"
        )
}
