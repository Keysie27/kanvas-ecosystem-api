type App {
    id: Int!
    name: String!
    description: String
    url: String
    domain: String
    default_apps_plan_id: Int
    is_actived: Int
    key: String
    payments_active: Int
    ecosystem_auth: Int
    is_public: Int
    domain_based: Int
    is_deleted: Int!
    created_at: String!
    updated_at: String!
}

extend type Query {
    apps(
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "key"
                    "name"
                    "description"
                    "url"
                    "domain"
                    "default_apps_plan_id"
                    "is_active"
                    "key"
                    "payments_active"
                    "ecosystem_auth"
                    "is_public"
                    "domain_based"
                ]
            )
        orderBy: _ @orderBy(columns: ["id"])
    ): [App] @paginate(model: "Kanvas\\Apps\\Models\\Apps")
}

input AppInput {
    name: String!
    description: String!
    url: String!
    domain: String!
    default_apps_plan_id: Int
    is_actived: Int
    key: String
    payments_active: Int!
    ecosystem_auth: Int!
    is_public: Int!
    domain_based: Int!
}

input appSettingInput
{
    name: String!
    value: String!
}

extend type Mutation @guard {
    createApp(input: AppInput): App!
        @field(resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\ManageApp@create")
    updateApp(id: String!, input: AppInput): App
        @field(resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\ManageApp@update")
    deleteApp(id: String!): App
        @field(resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\ManageApp@delete")
    restoreApp(id: String!): App
        @field(resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\ManageApp@restore")
    assignCompanyToApp(id: String!, companyId: String!): Company
        @field(resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AssignCompanyToApp")
    removeCompanyToApp(id: String!, companyId: String!): Company
        @field(resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AssignCompanyToApp@remove")
    activateApp(id: String!): App
        @field(resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\ActivateApp")
    deactivateApp(id: String!): App
        @field(resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\ActivateApp@deActive")
    saveAppSettings(id: String!, input: appSettingInput): App
        @field(resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\SaveAppSettings")
    addTemplateToApp(id: String!, templateId: String!): App
        @field(resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AddTemplateToApp")
    removeTemplateToApp(id: String!, templateId: String!): App
        @field(resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\RemoveTemplateToApp")
}
