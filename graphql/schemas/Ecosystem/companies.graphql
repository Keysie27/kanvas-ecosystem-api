type Company {
    id: Int!
    uuid: String!
    name: String!
    website: String
    address: String
    zipcode: Int
    email: String
    language: String
    timezone: String
    phone: String
    country_code: String
    created_at: DateTime
    updated_at: DateTime
}

type CompanyGroup {
    id: Int!
    uuid: String!
    name: String!
    app: App!
    stripe_id: String
    is_default: Int!
    country_code: String
    created_at: DateTime
    updated_at: DateTime
}

type CompanyAssociation {
    companyGroup: CompanyGroup!
    company: Company!
    is_default: Int!
    created_at: DateTime
    updated_at: DateTime
}

type CompanyBranch {
    id: Int!
    company: Company!
    name: String!
    email: String
    phone: String
    zipcode: Int
    is_default: Int!
    created_at: DateTime
    updated_at: DateTime
}

type CompanySettings {
    company: Company!
    name: String!
    value: String
    created_at: DateTime
    updated_at: DateTime
}

input CompanyInput {
    name: String!
    website: String
    address: String
    zipcode: Int
    email: String
    language: String
    timezone: String
    phone: String
    country_code: String
}

extend type Mutation @guard {
    createCompany(input: CompanyInput): Company!
        @field(resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Companies\\CreateCompany")
    updateCompany(id: Int!, input: CompanyInput): Company!
        @field(resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Companies\\UpdateCompany")
    deleteCompany(id: Int!): String
        @field(resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Companies\\DeleteCompany")
}
