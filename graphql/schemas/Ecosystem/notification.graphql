type Notification {
    id: ID!
    users: User!
    fromUsers: User!
    companies: Company!
    systemModule: SystemModule!
    types(filter: NotificationTypeFilterInput): NotificationType!
    entity_id: String!
    entity(fields: JSON): Mixed @method(name: "getEntityData")
    content: String
    read: Int!
    content_group: String
    created_at: String!
    updated_at: String
}

type NotificationType {
    id: ID!
    systemModule: SystemModule!
    parent: NotificationType
    channel: NotificationChannel
    name: String!
    key: String!
    verb: String
    event: String
    description: String
    template: String
    weight: Int!
    is_published: Int!
    created_at: String!
    updated_at: String
}

type NotificationChannel {
    id: ID!
    name: String!
    slug: String!
}

type NotificationMessageResponse {
    success: Boolean!
    message: String!
}

enum NotificationChannels {
  MAIL @enum(value: 1)
  PUSH @enum(value: 2)
  REALTIME @enum(value: 3)
  SMS @enum(value: 4)
}

input NotificationEntityFilterInput {
    nested_key: String!
    value: Int!
}

input NotificationTypeFilterInput {
    verb: String
    event: String
}

extend type Query @guard {
    notifications(
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "from_users_id"
                    "companies_id"
                    "system_modules_id"
                    "entity_id"
                    "read"
                    "content_group"
                    "types"
                ]
            )
        whereEntity: NotificationEntityFilterInput
            @whereJsonNestedKey(key: "entity_content", nestedKey: "nested_key")
        whereType: NotificationTypeFilterInput
        orderBy: _ @orderBy(columns: ["id", "created_at", "updated_at"])
    ): [Notification!]!
        @paginate(
            model: "Kanvas\\Notifications\\Models\\Notifications"
            scopes: ["allNotifications"]
        )
    notificationTypes(
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "system_modules_id"
                    "parent_id"
                    "notification_channel_id"
                    "key"
                    "name"
                    "weight"
                ]
            )
        orderBy: _ @orderBy(columns: ["id", "weight"])
    ): [NotificationType!]!
        @paginate(
            model: "Kanvas\\Notifications\\Models\\NotificationTypes"
            scopes: ["fromApp", "notDeleted"]
        )
    notificationChannels(
        where: _ @whereConditions(columns: ["id", "name", "slug"])
        orderBy: _ @orderBy(columns: ["id"])
    ): [NotificationChannel!]!
        @paginate(
            model: "Kanvas\\Notifications\\Models\\NotificationChannel"
            scopes: ["notDeleted"]
        )
}

extend type Mutation @guard {
    readAllNotifications: Boolean
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Notifications\\ReadAllNotificationMutation"
        )
    sendNotificationBaseOnTemplate(
        template_name: String!
        data: Mixed!
        via: [String!]!
        users_id: [Int!]!
    ): Boolean
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Notifications\\NotificationsManagementMutation@sendNotificationBaseOnTemplate"
        )
    sendNotificationByMessage(
        metadata: Mixed!
        message: Mixed!
    ): NotificationMessageResponse!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Notifications\\NotificationsManagementMutation@sendNotificationByMessage"
        )
}
