type User {
    id: Int!
    uuid: String!
    firstname: String!
    lastname: String!
    displayname: String!
    email: String!
    phone: String
    user_active: Boolean!
    created_at: DateTime
    updated_at: DateTime
    branches: [Branch]
}

type Branch {
    id: Int!
    companies_id: Int!
    users_id: Int!
    name: String!
    address: String
    email: String
    phone: String
    zipcode: String
    is_default: String
}

type TokenResponse {
    id: Int!
    token: String!
    refresh_token: String!
    token_expires: DateTime!
    refresh_token_expires: DateTime!
    time: String!
    timezone: String!
}

type RegisterResponse {
    user: User!
    token: TokenResponse!
}

input LoginInput {
    email: String!
    password: String!
}

input ForgotPasswordInput {
    email: String! @rules(apply: ["required","email"])
}

input RegisterInput {
    firstname: String
    lastname: String
    displayname: String
    email: String @rules(apply: ["required"])
    password: String @rules(apply: ["required"])
    password_confirmation: String @rules(apply: ["required"])
    company_name: String
    roles_id: Int
}

extend type Mutation {
    login(data: LoginInput!): TokenResponse!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Auth\\Login@resolve"
        )
    register(data: RegisterInput!): RegisterResponse!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Auth\\Register@resolve"
        )
    forgotPassword(data: ForgotPasswordInput!): Boolean
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Auth\\ForgotPassword@forgot"
        )
}

type Query @guard {
    me: User! @auth
    user(id: ID! @eq): User
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Queries\\Users\\UsersList@getFromCurrentCompany"
        )
}
