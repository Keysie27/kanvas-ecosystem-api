type People {
    id: ID!
    uuid: String!
    company: Company! @belongsTo
    user: User! @belongsTo
    name: String!
    firstname: String!
    middlename: String
    lastname: String!
    dob: Date
    contacts: [Contact!]! @hasMany
    address: [Address!]! @hasMany
    custom_fields: [CustomField!]!
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Ecosystem\\Queries\\CustomFields\\CustomFieldQuery@getAllByGraphType"
        )
}

type PeopleRelationship {
    id: ID!
    name: String!
    description: String
    company: Company! @belongsTo
}

input PeopleInput {
    id: ID
    firstname: String!
    middlename: String
    lastname: String!
    facebook_contact_id: String
    twitter_contact_id: String
    linkedin_contact_id: String
    google_contact_id: String
    dob: String
    contacts: [ContactInput!]!
    address: [AddressInput!]!
    custom_fields: [CustomFieldEntityInput!]
}

input PeopleParticipantInput {
    id: ID
    firstname: String!
    middlename: String
    lastname: String!
    participants_types_id: ID!
    facebook_contact_id: String
    twitter_contact_id: String
    linkedin_contact_id: String
    google_contact_id: String
    dob: Date
    contacts: [ContactInput!]!
    address: [AddressInput!]!
}

extend type Query @guard {
    peoples(
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "uuid"
                    "companies_id"
                    "dob"
                ]
            )
        orderBy: _ @orderBy(columns: ["id", "created_at", "updated_at", "name", "dob"])
    ): [People!]!
        @paginate(
            model: "Kanvas\\Guild\\Customers\\Models\\People"
            scopes: ["fromCompany"]
            defaultCount: 25
        )
    peopleRelationships(
        where: _ @whereConditions(columns: ["name", "description", "id"])
    ): [PeopleRelationship!]!
        @paginate(
            model: "Kanvas\\Guild\\Customers\\Models\\PeopleRelationship"
            defaultCount: 25
            scopes: ["fromApp", "fromCompany"]
        )
}

extend type Mutation @guard {
    createPeople(input: PeopleInput!): People
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Peoples\\PeopleManagementMutation@create"
        )
    updatePeople(id: ID!, input: PeopleInput!): People
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Peoples\\PeopleManagementMutation@update"
        )
    deletePeople(id: ID!): Boolean
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Peoples\\PeopleManagementMutation@delete"
        )
    restorePeople(id: ID!): Boolean
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Peoples\\PeopleManagementMutation@restore"
        )
}
