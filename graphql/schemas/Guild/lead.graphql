type Lead {
    id: ID!
    uuid: String!
    company: Company! @belongsTo
    branch: CompanyBranch! @belongsTo
    title: String!
    people: People
    owner: User @belongsTo
    organization: Organization @belongsTo
    receiver: LeadReceiver @belongsTo
    status: LeadStatus @belongsTo
    type: LeadType @belongsTo
    source: LeadSource @belongsTo
    firstname: String
    lastname: String
    email: String
    phone: String
    description: String
    reason_lost: String
    pipeline: LeadPipeline @belongsTo
    stage: LeadPipelineStage @belongsTo(relation: "stage")
    participants: [LeadsParticipants!]! @hasMany
    custom_fields: [CustomField!]!
        @paginate(
            defaultCount: 10
            builder: "App\\GraphQL\\Ecosystem\\Queries\\CustomFields\\CustomFieldQuery@getAllByGraphType"
        )
    created_at: DateTime!
    updated_at: DateTime!
}

type LeadsParticipants {
    people: People! @belongsTo
    relationship: PeopleRelationship @belongsTo
}
type Rotation{ 
    id: ID!
    users_id: Int!
    companies_id: Int!
}
type LeadReceiver {
    id: ID!
    uuid: String!
    company: Company! @belongsTo
    branch: CompanyBranch! @belongsTo
    name: String!
    user: User @belongsTo
    agent: User @belongsTo
    rotation: Rotation! @belongsTo
    source: LeadSource @belongsTo
    type: LeadType @belongsTo
    source_name: String
    template: JSON
    total_leads: Int!
    is_default: Boolean!
    created_at: DateTime!
}

type LeadStatus {
    id: ID!
    name: String!
    is_default: Boolean!
}

type LeadType {
    id: ID!
    company: Company! @belongsTo
    name: String!
    description: String
}

type LeadSource {
    id: ID!
    company: Company! @belongsTo
    name: String!
    description: String
    type: LeadType
}

type LeadPipeline {
    id: ID!
    company: Company! @belongsTo
    module: SystemModule! @belongsTo
    stages: [LeadPipelineStage!]! @hasMany
    name: String!
    slug: String!
    weight: Int!
    is_default: Boolean!
}

type LeadPipelineStage {
    id: ID!
    pipeline: LeadPipeline! @belongsTo
    name: String!
    rotting_days: Int!
    weight: Int!
}

input LeadsParticipantsInput {
    lead_id: Int!
    people_id: Int!
    relationship_id: Int!
}

input LeadInput {
    branch_id: Int
    title: String!
    people: PeopleInput!
    organization: OrganizationInput
    participants: [PeopleParticipantInput!]!
    leads_owner_id: Int
    receiver_id: Int
    status_id: Int
    type_id: Int
    source_id: Int
    description: String
    reason_lost: String
    pipeline_stage_id: Int!
    custom_fields: [CustomFieldEntityInput!]!
}

input LeadUpdateInput {
    branch_id: Int!
    title: String
    people_id: Int!
    leads_owner_id: Int
    organization_id: Int
    receiver_id: Int
    status_id: Int
    type_id: Int
    source_id: Int
    description: String
    reason_lost: String
    pipeline_stage_id: Int
    custom_fields: [CustomFieldEntityInput!]!
}

extend type Mutation @guard {
    createLead(input: LeadInput!): Lead
        @field(resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\LeadManagementMutation@create")
    updateLead(id: Int!, input: LeadUpdateInput!): Lead
        @field(resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\LeadManagementMutation@update")
    deleteLead(id: ID!): Boolean
        @field(resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\LeadManagementMutation@delete")
    restoreLead(id: ID!): Boolean
        @field(resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\LeadManagementMutation@restore")
    addLeadParticipant(input: LeadsParticipantsInput!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\ParticipantMutation@add"
        )
    removeLeadParticipant(input: LeadsParticipantsInput!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\ParticipantMutation@remove"
        )
}

extend type Query @guard {
    leads(
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "uuid"
                    "companies_id"
                    "companies_branches_id"
                    "leads_receivers_id"
                    "leads_owner_id"
                    "pipeline_id"
                    "pipeline_stage_id"
                    "people_id"
                    "lead_types_id"
                    "status"
                ]
            )
    ): [Lead!]!
        @paginate(
            model: "Kanvas\\Guild\\Leads\\Models\\Lead"
            scopes: ["fromCompany"]
            defaultCount: 10
        )
}
