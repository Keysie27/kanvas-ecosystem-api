type Region {
    id: Int!
    companies_id: Int!
    apps_id: Int!
    currency_id: Int!
    uuid: String!
    name: String!
    slug: String!
    short_slug: String!
    settings: String
    is_default: Int!
}
input RegionInput {
    currency_id: Int!
    name: String!
    slug: String!
    short_slug: String!
    settings: String
    is_default: Int!
}
input RegionInputUpdate {
    currency_id: Int
    name: String
    slug: String
    short_slug: String
    settings: String
    is_default: Int
}
extend type Query @guard {
    regions(
        where: _
            @whereConditions(
                columns: [
                    "name",
                    "slug",
                    "short_slug",
                ]
            )
    ): [Region]
        @paginate(
            builder: "App\\GraphQL\\Inventory\\Builders\\Regions\\Region@all"
            defaultCount: 10
        )
}
extend type Mutation @guard {
    createRegion(input: RegionInput!): Region! @field(resolver: "App\\GraphQL\\Inventory\\Mutations\\Regions\\Region@create")
    updateRegion(id: Int!, input: RegionInputUpdate!): Region! @field(resolver: "App\\GraphQL\\Inventory\\Mutations\\Regions\\Region@update")
    deleteRegion(id: Int!): Boolean! @field(resolver: "App\\GraphQL\\Inventory\\Mutations\\Regions\\Region@delete")
}