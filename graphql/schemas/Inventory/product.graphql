type Product {
    id: Int!
    products_types_id: Int
    uuid: String
    name: String!
    slug: String!
    description: String!
    short_description: String
    html_description: String
    warranty_terms: String
    upc: String
    files: [Filesystem]
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Ecosystem\\Queries\\Filesystem\\FilesystemQuery@getFileByGraphType"
        ) 
    is_published: Boolean
    created_at: String
    updated_at: String
    categories: [Category]
    warehouses: [Warehouse]
    attributes: [Attributes]
    variants: [Variant]
    productsTypes: ProductType
    companies: Company
}

input ProductInput {
    products_types_id: Int
    name: String!
    description: String!
    slug: String
    short_description: String
    html_description: String
    warranty_terms: String
    upc: String
    is_published: Boolean
    categories: [Int]
    warehouses: [Int]
    source_id: Mixed
    variants: [VariantsInput]
    attributes: [AttributeInput]
    files: [FilesystemInputUrl]
    price: Float
}

input ProductInputUpdate {
    products_types_id: Int
    name: String
    description: String
    short_description: String
    html_description: String
    warranty_terms: String
    upc: String
    is_published: Boolean
    files: [FilesystemInputUrl]
}

extend type Mutation @guard {
    createProduct(input: ProductInput!): Product
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Products\\Products@create"
        )
    updateProduct(id: Int!, input: ProductInputUpdate): Product
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Products\\Products@update"
        )
    deleteProduct(id: Int!): Boolean
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Products\\Products@delete"
        )
    addAttribute(id: Int!, attribute_id: Int!, value: String!): Product
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Products\\Products@addAttribute"
        )
    removeAttribute(id: Int!, attribute_id: Int!): Product
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Products\\Products@removeAttribute"
        )
    addWarehouse(id: Int!, warehouse_id: Int!): Product
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Products\\Products@addWarehouse"
        )
    removeWarehouse(id: Int!, warehouse_id: Int!): Product
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Products\\Products@removeWarehouse"
        )
    addCategory(id: Int!, category_id: Int!): Product
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Products\\Products@addCategory"
        )
}

extend type Query @guard {
    products(
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "products_types_id"
                    "name"
                    "slug"
                    "code"
                    "uuid"
                    "is_published"
                ]
            )
        orderBy: _ @orderBy(columns: ["id", "created_at", "updated_at", "name"])
    ): [Product]
        @paginate(
            model: "Kanvas\\Inventory\\Products\\Models\\Products"
            scopes: ["fromApp", "fromCompany", "notDeleted"]
            defaultCount: 25
        )
}
